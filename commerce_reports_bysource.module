<?php

/**
 * Implements hook_init()
 */
function commerce_reports_bysource_init(){

    $src_tmpget = NULL;

    if ( array_key_exists('src', $_GET) ){
        $src_tmpget = $_GET["src"];	
    }
/*
g= get, s = session
    g s
    0 0 (direct) nothing
    0 1 nothing
    1 0 insert g > s
    1 1 insert g > s
*/
    if ( !empty($src_tmpget) ) {
        $_SESSION['commerce_reports_bysource']['src_code'] = $src_tmpget;
	}

    //drupal_set_message("<pre>" . print_r(array('src'=>$src_tmpget,'session'=>$_SESSION['commerce_reports_bysource']), 1) . "</pre>");

}

/**
 * Action for rule commerce_reports_bysource_classify
 */
function commerce_reports_bysource_classify_order($order){

//set values
    unset($term);
    $src_code = $_SESSION['commerce_reports_bysource']['src_code'];

    if ( !empty($src_code) ) {

        $vocabulary = 'commerce_reports_bysource';

        $taxonomy = taxonomy_get_term_by_name($src_code, $vocabulary );
        if ( !empty($taxonomy) ){
        	$taxonomy_item = array_pop($taxonomy);
        	$tid = $taxonomy_item->tid;	
        }else{
            $tid = _create_source($vocabulary, $src_code);
        }

        //drupal_set_message("<pre>" . print_r(array('tid_to_insert'=>$tid),1) . "</pre>");
        $order = entity_metadata_wrapper('commerce_order', $order);

        //classify order by source and save
        $order->field_reports_bysource->set(intval($tid));
        $order->save();

        //drupal_set_message("<pre>order: \n" . print_r($order,1) . "</pre>");

        unset($_SESSION['commerce_reports_bysource']);

    }

}

/**
 * Implements hook_views_api().
 */
function commerce_reports_bysource_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_reports_bysource') . '/views',
  );
}

/**
 * Auxiliary function for create taxonomy term of the commerce_reports_bysource
 */

function _create_source($vocabulary=NULL,$src=NULL){
    $tid = NULL;

    if ( !empty($vocabulary) && !empty($src) ){
            $vocabulary_names = taxonomy_vocabulary_get_names();
            $vid = $vocabulary_names[$vocabulary]->vid;
            $newsrc = (object) array(
                    'name' => $src,
                    'description' => 'Source: ' . $src,
                    'vid' => $vid,
                    );
            taxonomy_term_save($newsrc);
            $taxonomy = taxonomy_get_term_by_name($src, $vocabulary);
            $taxonomy_item = array_pop($taxonomy);
            $tid = $taxonomy_item->tid;
    }

    return $tid;
}
